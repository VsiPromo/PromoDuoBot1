# -*- coding: utf-8 -*-
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters, CallbackQueryHandler
import sqlite3
# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN = '8184241735:AAFR2l26xI1U_GOh39RCPX5hBtvGnsUAIuQ'
CHANNELS = ['@Vsi_PROMO', '@uaclub_casinoman']
REWARD_PER_REF = 4
WITHDRAW_LIMIT = 100

# === –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö ===
conn = sqlite3.connect('promo_duo.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    invited_by INTEGER,
    balance INTEGER DEFAULT 0
)
""")
conn.commit()

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ ===
def check_subscriptions(user_id, context):
    for channel in CHANNELS:
        member = context.bot.get_chat_member(channel, user_id)
        if member.status not in ['member', 'administrator', 'creator']:
            return False
    return True

# === /start ===
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = user.id
    args = context.args

    if not check_subscriptions(user_id, context):
        buttons = [[InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª–∏", url=ch)] for ch in CHANNELS]
        update.message.reply_text("–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º:", reply_markup=InlineKeyboardMarkup(buttons))
        return

    if args:
        inviter_id = int(args[0])
        if inviter_id != user_id:
            cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            if not cursor.fetchone():
                cursor.execute("INSERT INTO users (user_id, invited_by, balance) VALUES (?, ?, 0)", (user_id, inviter_id))
                cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (REWARD_PER_REF, inviter_id))
                conn.commit()
    else:
        cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))

    context.bot.send_message(chat_id=user_id, text=f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}!")
–ó–∞–ø—Ä–æ—à—É–π –¥—Ä—É–∑—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º—É–π –ø–æ 4 –≥—Ä–Ω –∑–∞ –∫–æ–∂–Ω–æ–≥–æ!
context.bot.send_message(chat_id=user_id, text=f"–¢–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è: https://t.me/PromoDuoBot?start={user_id}")


# === /balance ===
def balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    bal = row[0] if row else 0
    msg = f"üëõ –¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {bal} –≥—Ä–Ω
"
    if bal >= WITHDRAW_LIMIT:
        msg += "‚úÖ –¢–∏ –º–æ–∂–µ—à –≤–∏–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏. –ù–∞–¥—ñ—à–ª–∏ /withdraw"
    else:
        msg += f"üîí –í–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–µ –ø—Ä–∏ {WITHDRAW_LIMIT} –≥—Ä–Ω"
    update.message.reply_text(msg)

# === /withdraw ===
def withdraw(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    bal = row[0] if row else 0
    if bal < WITHDRAW_LIMIT:
        update.message.reply_text("üîí –í–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–µ –ø—Ä–∏ 100 –≥—Ä–Ω")
        return

    update.message.reply_text("üí≥ –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∞–±–æ –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –≤–∏–ø–ª–∞—Ç–∏")
    return

# === –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤ ===
def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row and row[0] >= WITHDRAW_LIMIT:
        admin_id = 7262164512
        context.bot.send_message(admin_id, f"üîî –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è\nüë§ @{update.effective_user.username}\nID: {user_id}\nüí∞ –°—É–º–∞: {row[0]} –≥—Ä–Ω\nüì§ –†–µ–∫–≤—ñ–∑–∏—Ç–∏: {text}")
        update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–ø–ª–∞—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∞–¥–º—ñ–Ω—É. –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!")

# === –û—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫ ===
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("balance", balance))
    dp.add_handler(CommandHandler("withdraw", withdraw))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
